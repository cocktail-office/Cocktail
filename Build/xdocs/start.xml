<?xml version="1.0"?>
<document>
    <title>getting started</title>
    <body>     
       	<menusection name="Need More Help?">
			<p>Check our 
			<a href="http://www.sourceforge.net/projects/wonder">Sourceforge 
			project page</a> for access to the source code (CVS repository).
			</p>

			<p>Also, feel free to join the 
			<a href="http://sourceforge.net/mail/?group_id=45176">WONDER discussion 
			list</a>, and ask your questions there.</p>
    	</menusection>    
    	   
        <section name="Getting Started with Project WONDER">
			<p>Follow these instructions to be up and running quickly with Project WONDER.</p>
			<ul>
				<li><a href="#pbx_setup">ProjectBuilder(X) Setup</a></li>
				<li><a href="#log4j_init">Log4j Initialization</a></li>
				<li><a href="#ercrypto">ERCrypto</a></li>
				<li><a href="#validation">Validation</a></li>
			</ul>
			<p> </p>

			<subsection name="PBX Setup" anchor="pbx_setup">
				<ol>
				
				<li>Create a directory "Roots" in your home directory.<br />
  				(This is only a suggestion for the location, it could be another directory...)</li>
				<li>In PBX, go to Preferences->Building
					<ol>
						<li>Check "Separate location for build products" and enter "~/Roots"</li>
  						<li>Check "Put intermediate build files with build products"</li>
					</ol>
				</li>
				<li>In *your own* applications and frameworks, select the top node of the 
				project tree</li>
				<li>Choose Project->Show Info menu
					<ol>
						<li>Check "Place build product at default location"</li>
   						<li>Check "Place intermediate files with build products"</li>
					</ol>
				</li>

				<li>Replace the ProjectBuilderJambase makefile located at:<br /><br />
					<code>/Developer/Makefiles/pbx_jamfiles/ProjectBuilderJambase</code><br/><br/>
					with our <a href="download/pbx_jambase_fix.tgz">updated copy (31 k .tgz)</a> 
					that fixes a bug in using the Jikes compiler with ProjectBuilder.  
					Here's a <a href=
					"http://www.omnigroup.com/mailman/archive/webobjects-dev/2002-February/019827.html">more 
					detailed description</a> of the bug.
					<p><em>(Remember to make a backup of your original file.)</em></p>
				</li>
				</ol>

				<p><strong>Do not change these settings!</strong></p>

				<p>For deployment, there will be a script that fixes the paths in 
				your start script. For now, you should copy the relevant directories manually 
				and edit your startup script to reflect the location of the copied frameworks.</p>

			</subsection>
			
			<subsection name="Log4j initialization" anchor="log4j_init">
				<p>To get Log4j going, you will need something akin to the following 
				in your &quot;WebObjects.properties&quot; (in your home directory under WO 5.1):</p>
				
<source>
log4j.rootCategory=DEBUG, A1
log4j.categoryFactory=er.extensions.ERXLogger$Factory
log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.layout=er.extensions.ERXPatternLayout
log4j.appender.A1.layout.ConversionPattern=%-5p %d{HH:mm:ss} (%-20c:%L) %x -%m%n
log4j.category.er=INFO
</source>
				<p> </p>
			</subsection>

			<subsection name="ERCrypto" anchor="ercrypto">
				<p>Using ERCrypto's methods will require a little bit of setup with JDK 1.3.</p>

				<p>This class requires that you have JCE (javax.crypto and the Sun provider) 
				installed. JCE is standard in the 1.4 JDK. For JDK 1.3 you can find it at 
				<a href="http://java.sun.com/products/jce/index-121.html">http://java.sun.com/products/jce/index-121.html</a>.
				</p>

				<ol>
					<li>Put the 4 JCE jars in your extensions directory 
					(/Library/Java/Home/lib/ext on MacOS X) for ERExtensionsJava to build.</li>
					<li>Also, edit /Library/Java/Home/lib/security/java.security, add the following line:</li>
<pre>
security.provider.4=com.sun.crypto.provider.SunJCE
</pre>
				</ol>

					
				<p> </p>
			</subsection>
	

			<subsection name="Validation" anchor="validation">
				<p>The validation should make localization of model-thrown messages 
				much easier, however there are a few prerequisites:</p>
				<ol>
					<li>Your classes (currently) must descend from ERXGenericRecord, 
					and your EOGenericRecord classes will be transformed to ERXGenericRecord.</li>
					<li>If you want to use your own ClassDescription, you must subclass 
					from ERXEntityClassDescription</li>
					<li>In your model, instead of:
<pre> 
    throw new NSValidation.ValidationException("Something went wrong!");
</pre>

  						<p>write</p>
<pre>
    throw new ERXValidationException(eo, key, value, "somecode");
</pre>
					</li>
					
					<li>In a &quot;Validations.strings&quot; file in your project, add:
<pre>
    somecode = "Something went wrong";
</pre>

						<p>Then localize the Validation.strings and when you display it, instead of</p>
<pre>
    catch (NSValidation.ValidationException ex) {
        errorMessage = ex.getMessage();
    }
</pre>

					<p>write</p>
				
<pre>
    catch (ERXValidationException exve) {
        exve.setTargetLanguage(theCurrentLanguage); //English,German etc.
        errorMessage = exve.getMessage();
    } catch (NSValidation.ValidationException ex) {
        errorMessage = ex.getMessage();
    }
</pre>

					<p>Translations of the plain model exceptions into German will be 
					supplied shortly, in the meantime, look at the English versions 
					in the ERDirectToWebJava framework.</p>
				</li>
				</ol>
			</subsection>
        </section>
    </body>
</document>
